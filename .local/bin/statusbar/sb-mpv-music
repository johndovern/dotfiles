#!/bin/bash

SOCKET="${MPV_MUSIC_SOCKET:-${MPV_SOCKET_DIR:-/tmp/mpvSockets}/music_socket}"
if [[ ! -S "${SOCKET}" ]]; then
  exit 0
fi

cut_song() {
  L=0
  while IFS= read -r -d "" -n 1 CHAR; do
    [[ "${L}" -eq 15 ]] && break
    printf '%s' "${CHAR}"
    L=$((L + 1))
  done < <(printf '%s' "${SONG}")
}

roll_text() {
  POSITION=$(tail -n1 "$SONG_FILE")
  LENGTH=${#SONG}
  PADDING=$((LENGTH - 15))
  [[ "$POSITION" -gt "$PADDING" ]] && POSITION=0
  printf '[%s]\n' "${SONG:$POSITION:15}"
  POSITION=$((POSITION + 1))
  sed -i "\$s/.*/$POSITION/" "$SONG_FILE" >/dev/null 2>&1

  return 0
}

mpv_display() {
  mpv-currently-playing --music --quiet || {
    printf '[%s]\n' "mpv-music"
    return 0
  }
  SONG_FILE="$SOCKET.txt"
  SONG="$(head -n1 "$SONG_FILE")"
  [[ "$1" == "-u" ]] && {
    printf '[%s]\n' "$SONG"
    return 0
  }
  [[ ${#SONG} -gt 15 ]] && LONG_MPV=1 || LONG_MPV=0
  [[ $LONG_MPV -eq 1 ]] && return 0
  SONG="$(cut_song | sed 's/\s\+$//g')"
  printf '[%s]\n' "$SONG"
}

case $BLOCK_BUTTON in
  1)
    mpv-toggle --music --quiet
    mpv_display
    ;;
  2)
    mpv-opts --quit --music
    mpv_display
    ;;
  3)
    notify-send "$(mpv_display -u)"
    mpv_display
    ;;
  4)
    mpv-prev --music
    mpv_display
    ;;
  5)
    mpv-next --music
    mpv_display
    ;;
  6)
    yt-opts "$(mpv-get-property --music "path")"
    mpv_display
    ;;
  *)
    mpv_display
    [[ $LONG_MPV -eq 1 ]] && roll_text
    ;;
esac
