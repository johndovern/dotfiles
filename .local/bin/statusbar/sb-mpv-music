#!/bin/bash

SOCKET="${MPV_MUSIC_SOCKET:-${MPV_SOCKET_DIR:-/tmp/mpvSockets}/music_socket}"
if [[ ! -S "${SOCKET}" ]] ; then
  exit 0
fi

cut_song() {
  L=0
  while IFS= read -r -d "" -n 1 CHAR; do
    [[ "${L}" -eq 15 ]] && break
    printf '%s' "${CHAR}"
    L=$((L+1))
  done < <(printf '%s' "${SONG}")
}

roll_text() {
  SONG="$(mpv-get-property "${SOCKET}" "media-title")"
  TIME="$(awk '{print int($1)}' /proc/uptime)"
  LENGTH=${#SONG}
  TIME=$((TIME % LENGTH))
  TIME_OUT=$((LENGTH - 15))
  while [[ $TIME -gt $TIME_OUT ]]; do
    TIME=$((TIME - TIME_OUT))
  done
  printf '[%s]\n' "${SONG:${TIME}:15}"

  return 0
}

mpv_display() {
  if mpv-currently-playing --music --socket >/dev/null 2>&1; then
    case "$1" in
      -u)
        SONG=$(mpv-currently-playing -M --music)
        ;;
      *)
        SONG="$(mpv-currently-playing -M --music)" # | cut -b -22 | sed 's/\s$//;s/.*/&.../'
        # [[ ${#SONG} -gt 15 ]] && setsid -f sb-mpv-roll -m >/dev/null 2>&1 &
        [[ ${#SONG} -gt 15 ]] && LONG_MPV=1 || LONG_MPV=0
        [[ $LONG_MPV -eq 1 ]] && return 0
        SONG="$(cut_song | sed 's/\s\+\?$/.../g')"
        PAUSED=''
        ;;
    esac
  else
    SONG=''
    PAUSED="mpv-music"
  fi
  printf '%s\n' "[${SONG}${PAUSED}]"
}

case $BLOCK_BUTTON in
  1)
    mpv-toggle --music
    mpv_display
    ;;
  2)
    mpv-opts --quit --music
    mpv_display
    ;;
  3)
    notify-send "$(mpv_display -u)"
    mpv_display
    ;;
  4)
    mpv-prev --music
    mpv_display
    ;;
  5)
    mpv-next --music
    mpv_display
    ;;
  6)
    yt-opts "$(mpv-get-property --music "path")"
    mpv_display
    ;;
  *)
    # pgrep sb-mpv-roll >/dev/null 2>&1 || {
      # mpv_display
      # exit 0
    # }
    mpv_display
    [[ $LONG_MPV -eq 1 ]] && roll_text
    ;;
esac
