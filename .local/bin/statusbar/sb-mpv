#!/bin/bash

set_socket() {
  if mpv-currently-playing --umpv --socket >/dev/null 2>&1; then
    SOCKET="${MPV_UMPV_SOCKET:-${MPV_SOCKET_DIR:-/tmp/mpvSockets}/umpv_socket}"
  elif mpv-currently-playing --unique --socket >/dev/null 2>&1; then
    SOCKET="$(mpv-currently-playing --unique --socket | head -n1)"
  fi
}

cut_song() {
  L=0
  while IFS= read -r -d "" -n 1 CHAR; do
    [[ "${L}" -eq 15 ]] && break
    printf '%s' "${CHAR}"
    L=$((L + 1))
  done < <(printf '%s' "${SONG}")
}

roll_text() {
  POSITION=$(tail -n1 "$SONG_FILE")
  LENGTH=${#SONG}
  PADDING=$((LENGTH - 15))
  [[ "$POSITION" -gt "$PADDING" ]] && POSITION=0
  printf '[%s]\n' "${SONG:$POSITION:15}"
  POSITION=$((POSITION + 1))
  sed -i "\$s/.*/$POSITION/" "$SONG_FILE" >/dev/null 2>&1

  return 0
}

mpv_display() {
  [[ -z "$SOCKET" ]] && {
    printf '%s\n' "[mpv]"
    return 0
  }
  SONG_FILE="$SOCKET.txt"
  # SONG="$(mpv-currently-playing -c "$SOCKET" -M)"
  SONG="$(head -n1 "$SONG_FILE")"
  [[ "$1" == "-u" ]] && {
    printf '[%s]\n' "$SONG"
    return 0
  }
  [[ ${#SONG} -gt 15 ]] && LONG_MPV=1 || LONG_MPV=0
  [[ $LONG_MPV -eq 1 ]] && return 0
  SONG="$(cut_song | sed 's/\s\+$//g')"
  printf '[%s]\n' "$SONG"
}

if ! pgrep -x "mpv" >/dev/null 2>&1; then
  exit 0
fi

set_socket

case $BLOCK_BUTTON in
  1)
    mpv-toggle --socket "${SOCKET}" || mpv-toggle --umpv || mpv-toggle --socket "$(mpv-active-sockets --unique | head -n1)"
    mpv_display
    ;;
  2)
    mpv-opts --quit --socket "${SOCKET}"
    set_socket
    mpv_display
    ;;
  3)
    notify-send "$(mpv_display -u)"
    mpv_display
    ;;
  4)
    mpv-prev --socket "${SOCKET}"
    mpv_display
    ;;
  5)
    mpv-next --socket "${SOCKET}"
    mpv_display
    ;;
  *)
    [[ -z "$SOCKET" ]] && {
      mpv_display
      exit
    }
    mpv_display
    [[ $LONG_MPV -eq 1 ]] && roll_text
    ;;
esac
