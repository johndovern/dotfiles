#!/bin/bash
MPV_LAST_PATH="$(readlink "/tmp/mpvSockets/mpv-last-used")"

abort() {
  usage
  exit 1
}

extra_opts() {
  if [[ "$START_LEFT" -eq 1 ]] || [[ "$START_RIGHT" -eq 1 ]] || [[ "$FLOAT_WIN" -eq 1 ]]; then
    get_mpv
  fi
  if [[ "$START_LEFT" -eq 1 ]]; then
    mpv_move 0
  elif [[ "$START_RIGHT" -eq 1 ]]; then
    mpv_move 1
  fi
  if [[ "$FLOAT_WIN" -eq 1 ]]; then
    wmctrl -ia "$CHOSEN_WID"
    xdotool keydown super shift space
    xdotool keyup super shift space
    dwmc focusnmon 0
  fi
}

get_opts() {
  while [[ $# -gt 0 ]]; do
    SHIFT_COUNT=1
    case "$1" in
      -d | --float)
        OPTION="FLOAT"
        OPTION_2="--music"
        break
        ;;
      -F | --focus)
        OPTION="FOCUS"
        break
        ;;
      -f | --full-screen)
        OPTION="FULL"
        break
        ;;
      --float-win) FLOAT_WIN=1 ;;
      -l | --last)
        notify-send "mpv-opts" "Using --last ??"
        GET_LAST=1
        ;;
      -L | --start-left) START_LEFT=1 ;;
      -m | --move)
        OPTION="MOVE"
        break
        ;;
      -M | --move-to)
        OPTION="MOVE"
        shift
        MPV_MON_NUM="${1:?--move-to needs a monitor}"
        break
        ;;
      -p | --press)
        OPTION="PRESS"
        shift
        [[ "$#" -ne 1 ]] && abort
        KEYS="$1"
        break
        ;;
      -P | --pid)
        shift
        GIVEN_PID="$1"
        ;;
      -q | --quit)
        OPTION="QUIT"
        shift
        case "$1" in
          --music)
            OPTION_2="$1"
            ;;
          --socket)
            OPTION_2="$1"
            shift
            [[ -z "$1" ]] && abort
            OPTION_3="$1"
            ;;
        esac
        break
        ;;
      -r | --start-right) START_RIGHT=1 ;;
      -s | --sticky)
        OPTION="STICKY"
        break
        ;;
      -u | --shuffle)
        OPTION="SHUFFLE"
        shift
        [[ "$1" == "--now" ]] && NOW=1
        break
        ;;
      *) usage ;;
    esac
    shift "$SHIFT_COUNT"
  done
}

get_initial_wid() {
  INITIAL_WID="$(xdotool getwindowfocus)"
}

get_chosen_wid() {
  CHOSEN_WID="$(xdotool search --pid "$1 - mpv")"
}

get_fullscreen_status() {
  FULLSCREEN="$(mpv-get-property "$1" "fullscreen")"
}

get_mon_num() {
  [[ -n "$MPV_MON_NUM" ]] && return
  RAW_MON_NAME="$(printf '%s' $(mpv-get-property "$1" "display-names") | sed -E 's/\["(.*)"\]/\1/')"
  if [[ "$RAW_MON_NAME" == "DisplayPort-0" ]]; then
    MPV_MON_NUM=1
  else
    MPV_MON_NUM=0
  fi
  [[ -n "$MPV_MON_NUM" ]]
}

get_mpv_given() {
  [[ -n "$GIVEN_PID" ]] || return 1
  CHOSEN="$GIVEN_PID"
  MPV_PATH="$(mpv-active-sockets --pid "$GIVEN_PID")"
  get_fullscreen_status "$MPV_PATH"
  get_chosen_wid "$CHOSEN"
  [[ -n "$MPV_PATH" ]] && [[ -n "$FULLSCREEN" ]] && [[ -n "$CHOSEN_WID" ]]
}

get_mpv_last() {
  [[ ! -S "$MPV_LAST_PATH" ]] && return 1
  CHOSEN="$(mpv-get-property "$MPV_LAST_PATH" 'pid')"
  MPV_PATH="$MPV_LAST_PATH"
  get_fullscreen_status "$MPV_PATH"
  get_chosen_wid "$CHOSEN"
  return 0
}

get_mpv_current() {
  [[ $(mpv-currently-playing --socket | wc -l) -eq 1 ]] || return 1
  CHOSEN="$(mpv-pick --pid --current)"
  MPV_PATH="$(mpv-pick --current)"
  get_fullscreen_status "$MPV_PATH"
  get_chosen_wid "$CHOSEN"
  return 0
}

get_mpv_active() {
  [[ $(mpv-active-sockets $OPTION_2 | wc -l) -eq 1 ]] || return 1
  CHOSEN="$(mpv-pick --pid)"
  MPV_PATH="$(mpv-pick)"
  get_fullscreen_status "$MPV_PATH"
  get_chosen_wid "$CHOSEN"
  return 0
}

get_mpv_pick() {
  CHOSEN="$(mpv-pick --pid --full --music)"
  [[ -z "$CHOSEN" ]] && return 1
  CHOSEN="${CHOSEN%%:*}"
  MPV_PATH="$(mpv-active-sockets --pid "$CHOSEN")"
  get_fullscreen_status "$MPV_PATH"
  get_chosen_wid "$CHOSEN"
}

get_mpv() {
  get_mpv_given && return 0
  get_mpv_current && return 0
  get_mpv_last && return 0
  get_mpv_active && return 0
  get_mpv_pick
}

mpv_float() {
  dwmc pushstack 0
  xdotool mousemove --window "$CHOSEN_WID" 0 0
  sleep 0.03
  xdotool keydown super mousedown 1
  xdotool mousemove 1272 756
  xdotool mouseup 1 keyup super
  sleep 0.03
  xdotool keydown super mousedown 3
  sleep 0.03
  xdotool mousemove 1781 1059
  xdotool mouseup 3 keyup super
  dwmc pushstack -1
  dwmc focusstack 0
  xdotool mousemove 0 300
  return 0
}

mpv_move() {
  get_initial_wid
  [[ "$FULLSCREEN" == "true" ]] && xdotool key --window "$CHOSEN_WID" f
  wmctrl -ia "$CHOSEN_WID"
  get_mon_num "$MPV_PATH"
  dwmc tagnmon "$MPV_MON_NUM"
  [[ "$FULLSCREEN" == "true" ]] && xdotool key --window "$CHOSEN_WID" f
  wmctrl -ia "$INITIAL_WID"
}

mpv_shuffle() {
  [[ "$NOW" -eq 1 ]] && {
    mpv-communicate "$(mpv-active-sockets --unique | tail -n1)" \
      '{ "command": ["script-binding", "playlistmanager/shuffleplaylist"] }' >/dev/null 2>&1
    return 0
  }
  IFS=$'\n' read -r -d '' -a ACTIVE < <(mpv-active-sockets --umpv --ampv && printf '\0')
  [[ "${#ACTIVE[@]}" -eq 0 ]] && return 1
  [[ "${#ACTIVE[@]}" -eq 1 ]] && {
    mpv-communicate "$ACTIVE" \
      '{ "command": ["script-binding", "playlistmanager/shuffleplaylist"] }' >/dev/null 2>&1
    return 0
  }
  SHUFFLE="$(mpv-pick --full --umpv --ampv --quiet)"
  [[ -z "$SHUFFLE" ]] && return 1
  mpv-communicate "${SHUFFLE%%:*}" \
    '{ "command": ["script-binding", "playlistmanager/shuffleplaylist"] }' >/dev/null 2>&1
}

opts_handler() {
  killall wmctrl >/dev/null 2>&1
  case "$OPTION" in
    FLOAT)
      get_mpv || return 1
      sleep 0.2
      mpv_float
      ;;
    FOCUS)
      get_mpv || return 1
      [[ -z "$GIVEN_PID" ]] && sleep 0.2
      wmctrl -ia "$CHOSEN_WID"
      ;;
    FULL)
      get_mpv || return 1
      sleep 0.2
      xdotool key --window "$CHOSEN_WID" f # && wmctrl -ia "$CHOSEN_WID"
      ;;
    MOVE)
      get_mpv || return 1
      mpv_move
      ;;
    PRESS)
      get_mpv || return 1
      press_keys
      ;;
    QUIT)
      mpv-quit "$OPTION_2" "$OPTION_3"
      ;;
    STICKY)
      get_mpv || return 1
      sleep 0.2
      wmctrl -ia "$CHOSEN_WID" && xdotool key super+s super+f
      ;;
    SHUFFLE)
      mpv_shuffle || return 1
      ;;
    *)
      notify-send -u critical "Error" "Invalid option: $OPTION"
      return 1
      ;;
  esac
}

press_keys() {
  mpv-communicate "$MPV_PATH" "$(printf '{ "command": ["keypress", "%s" ] }' "$KEYS")"
}

usage() {
  cat <<-EOF
  Usage: mpv-opts [-d | -f | -F | -m | -p | -q | -s | -u]

  Control an instance of mpv via commandline and sockets. Great for hotkeys

  Options:

    -d, --float         Float an instance of mpv to the bottom right of the monitor.
    -F, --focus         Focus an instance of mpv.
    -f, --full-screen   Full screen an instance of mpv.
    -m, --move          Move instance of mpv to opposite monitor.
    -M, --move-to MON   Move mpv to MON.
    -p, --press KEY     Send KEY to mpv via keypress function
    -q, --quit          Quit an instance of mpv. This flag may be followed by two other flags.
                        The --music flag when given after -q will quit the mpv-music instance.
                        The --socket flag quits the given socket which is required.
    -s, --sticky        Make an instance of mpv sticky.
    -u, --shuffle       Shuffle an instance of mpv excluding the umpv instance. This flag will
                        accept the --now flag to shuffle the most recent instance of mpv.
EOF
  exit 1
}

main() {
  get_opts "$@" || return 1
  opts_handler
  extra_opts && return 0 || return 1
}

main "$@" && exit 0

# Runs on error
notify-send -u critical "Error" "mpv-opts failed \
CHOSEN: $CHOSEN
CHOSEN_WID: $CHOSEN_WID"
exit 1
