# Bindings
map ,am  animove
map ,bs  bscript
map ,ce  cred
map ,ch  chmod
map ,cs  push $curl<space>-LJO<space>
map ,cx  chmodx
map ,e   $dmacs "$PWD"
map ,fm  fmpv
map ,gc  push $git<space>clone<space>
map ,gi  %dmenugitignore
map ,gI  get_info
map ,l   $lfrun
map ,mb  $manga-bulk
map ,mm  mangamove
map ,nc  push $nvim<space>.c<left><left>
map ,nf  mknf
map ,ps  py_script
map ,rf  replace_files
map ,T   track
map ,ts  $cd ~/.local/bin/scripts ; nvim tscript
map ,ut  untar
map ,yp  yank-path
map ,yd  yank-dirname

map <a-z> $sudo make uninstall && sudo make clean install && renew-dwm

map <esc> candr

map ,

# cmd/functions
cmd animove ${{
  [ ! -e folder ] && mkdir folder
  while read -r file ; do
    mv "$file" $(pwd)/folder/
  done < <(printf '%s\n' "$fx")

  lf -remote 'send reload'
}}

cmd bscript ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "script name: "
  read ans
  [ ! -e "$ans" ] && echo "#!/bin/bash" >> "$ans" && chmod +x "$ans" && nvim "$ans"
}}

cmd candr ${{
  lf -remote 'send clear'
  lf -remote 'send reload'
}}

cmd cred ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "file name: "
  read ans
  [ ! -e $ans ] && nvim $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"; do
  chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd chmodx ${{
  for file in "$fx"; do
  chmod +x $file
  done

  lf -remote 'send reload'
}}

cmd fmpv ${{
  setsid -f mpv $f --x11-name=fmpv -quiet >/dev/null 2>&1 & sleep 0.2 && \
    xdotool key --clearmodifiers super+K super+f
}}

cmd get_info ${{
  # trap 'rm -f "${TMP_DIR}/"*' EXIT
  TMP_DIR="/tmp/manga_lf"
  [ ! -d "${TMP_DIR}" ] && mkdir -p "${TMP_DIR}"
  TMP_FILE="$(mktemp -p "${TMP_DIR}")"
  echo "$id" > "${TMP_FILE}"
  # sleep 0.2
  # exit
}}

cmd mangamove ${{
  [ ! -d read ] && mkdir read
  [ ! -e manga.log ] && touch manga.log

  while read -r file ; do
    mv "$file" $(pwd)/read/
    echo "$file" >> manga.log
  done < <(printf '%s\n' "$fx")

  [ -e manga.log ] && {
    mv manga.log manga.log.bak
    sort -u manga.log.bak > manga.log
    rm manga.log.bak
  }

  lf -remote 'send reload'
}}

cmd mknf ${{
  mkdir folder
  lf -remote 'send reload'
}}

cmd py_script ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "Script name: "
  read ans
  [ ! -e $ans ] && echo "#!/usr/bin/env python3" > "$ans" && chmod +x "$ans" && nvim "$ans"
}}

cmd replace_files ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf '%s' "Replace old files? [y/N] "
  read ans
  [ $ans = "y" ] && {
    set +f
    for file in * ; do
        [[ ! "$file" =~ \.~1~$ ]] && continue
        mv "$file" "${file%\.*}"
    done
  }
  exit 0
}}

cmd track ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "%s\n\t" "$fx"
  printf "Track? [y/N] "
  read ans
  [ $ans = "y" ] && echo "!${fx##*/}" >> .gitignore
}}

cmd untar ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "%s\n\t" "$fx"
  printf "Untar? [y/N] "
  read ans
  [ $ans = "y" ] && tar xvzf "$fx"
}}

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard

cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
